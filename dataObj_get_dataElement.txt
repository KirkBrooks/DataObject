  //  dataObj_get_dataElement  // Written by: Kirk Brooks as Designer, Created: 07/07/17, 07:08:26  // ------------------  // Method: dataObj_get_dataElement (text{;c-obj}) -> c-obj  // $1 is a dot-notation path  // $2 is TRUE to build out the data obj -- default is TRUE  // $3 is the c-obj                      -- default is prosObject  // $0 is ref to the data object  // Purpose: return the c-obj that contains the last keyC_TEXT($path;$1)C_BOOLEAN($build;$2)C_OBJECT($o;$3)C_LONGINT($i;$n;$pos;$len)C_TEXT($key)$o:=OB_new $path:=$1$build:=TrueIf (Count parameters>1)$build:=$2End if If (Count parameters=3)$o:=$3Else ProsObj_INIT $o:=prosObjectEnd if   // --------------------------------------------------------  //  parse the path into its elementsARRAY TEXT($aKeys;0)ARRAY LONGINT($aIndex;0)dataObj_parse_path ($path;->$aKeys;->$aIndex)  // --------------------------------------------------------$n:=Size of array($aKeys)ARRAY OBJECT($aDataObj;$n)ARRAY OBJECT($aArrays;$n;0)  // this will be the obj arrays$aDataObj{0}:=$o  // init the dataObj array with the designated object$curObj:=$oFor ($i;1;$n)$key:=$aKeys{$i}  //          current key of curObj$j:=$aIndex{$i}  //           array index if any$aDataObj{$i}:=OB_new   //    initiailize this data obj$curObj:=OB_new $curObj:=$aDataObj{$i-1}  //  from previous iteraton  // --------------------------------------------------------Case of : ($j=-1)  //       get next objectCase of : (OB Is defined($curObj;$key))  // the object exists$aDataObj{$i}:=OB Get($curObj;$key;Is object)$curObj:=OB_new $curObj:=$aDataObj{$i}: ($build)  //   add itOB SET($curObj;$key;OB_new )$aDataObj{$i}:=OB Get($curObj;$key;Is object)$curObj:=OB_new $curObj:=$aDataObj{$i}Else   // bail $curObj:=OB_new $aDataObj{$i}:=$curObj$i:=$n+1End case : ($j>-1)  //       an array  //  does the array exist?Case of : (OB Is defined($curObj;$key))If ($j=0)  // we want to return the array object  //         and we can't go any deeperOB GET ARRAY($curObj;$key;$aArrays{$i})OB SET ARRAY($aDataObj{$i};$key;$aArrays{$i})$curObj:=OB_new $curObj:=$aDataObj{$i}$i:=$n+1Else OB GET ARRAY($curObj;$key;$aArrays{$i})  //  get the array into the array  // is this array large enough?Case of : (Size of array($aArrays{$i})>=$j)  // it's good  //   get the array elementCase of : (OB Is defined($aArrays{$i}{$j}))$aDataObj{$i}:=$aArrays{$i}{$j}$curObj:=OB_new $curObj:=$aArrays{$i}{$j}: ($build)  //  the array element exists but it's not defined yet$aArrays{$i}{$j}:=OB_new   // since we are building it out define itOB SET ARRAY($curObj;$key;$aArrays{$i})$aDataObj{$i}:=$aArrays{$i}{$j}$curObj:=OB_new $curObj:=$aArrays{$i}{$j}Else   // can't go any deeper$aDataObj{$i}:=$curObj$i:=$n+1End case : ($build) & (Size of array($aArrays{$i})<$j)ARRAY OBJECT($aArrays{$i};$j)  //   put the array element into the data obj$aArrays{$i}{$j}:=OB_new   // initializeOB SET ARRAY($curObj;$key;$aArrays{$i})$aDataObj{$i}:=$aArrays{$i}{$j}$curObj:=OB_new $curObj:=$aArrays{$i}{$j}Else //  we're done$aDataObj{$i}:=$curObj$i:=$n+1End case End if : ($build)  //  add itARRAY OBJECT($aArrays{$i};$j)$aArrays{$i}{$j}:=OB_new   // initializeOB SET ARRAY($curObj;$key;$aArrays{$i})$aDataObj{$i}:=$aArrays{$i}{$j}$curObj:=OB_new $curObj:=$aArrays{$i}{$j}  //  in case this is the final iterationElse   //       we're done$curObj:=OB_new $i:=$n+1End case : ($i=$n)End case End for   // --------------------------------------------------------$0:=$curObj